{"version":3,"sources":["components/header/logo.png","containers/reducers.js","components/header/HeaderLogo.js","components/header/HeaderContainer.js","components/mainContent/options.js","containers/actions.js","containers/constants.js","containers/sideBar/SideBarOption.js","components/sideBar/SideBar.js","components/mainContent/SWHero.js","components/mainContent/SWPlanet.js","containers/resultList/ResultsList.js","components/mainContent/GeneralContainer.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialRobotsState","isPending","type","content","error","HeaderLogo","react_default","a","createElement","className","src","logo","alt","HeaderContainer","header_HeaderLogo","Component","options","requestContent","dispatch","fetch","concat","then","response","json","payload","catch","err","SideBarOption","_this$props","this","props","onContentChange","option","id","onClick","toUpperCase","connect","state","event","target","SideBar","map","sideBar_SideBarOption","key","SWHero","_ref","name","by","style","border","color","SWPlanet","terrain","gravity","climate","population","ResultsList","onRender","el","mainContent_SWHero","birth_year","mainContent_SWPlanet","GeneralContainer","sideBar_SideBar","resultList_ResultsList","App","header_HeaderContainer","mainContent_GeneralContainer","Boolean","window","location","hostname","match","store","createStore","arguments","length","undefined","action","Object","assign","results","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c89ad9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.93895aa2.png\";","import {REQUEST_CONTENT_PENDING, REQUEST_CONTENT_SUCCESS, REQUEST_CONTENT_FAILED} from './constants';\r\n\r\nconst initialRobotsState={\r\n    isPending: true,\r\n    type: '',\r\n    content: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestContent=(state=initialRobotsState, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_CONTENT_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_CONTENT_SUCCESS:\r\n            return Object.assign({}, state, {isPending: false, type: action.payload.type, content: action.payload.content.results});\r\n        case REQUEST_CONTENT_FAILED:\r\n            return Object.assign({}, state, {isPending: false, error: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.png';\r\n\r\nconst HeaderLogo=()=>{\r\n    return(\r\n       <div className='header-logo'>\r\n           <img src={logo} alt='Star Wars logo'></img>\r\n       </div> \r\n    )\r\n}\r\n\r\nexport default HeaderLogo;","import React, {Component} from 'react';\r\nimport HeaderLogo from '../../components/header/HeaderLogo';\r\nimport './header.css';\r\n\r\nclass HeaderContainer extends Component{\r\n    render(){\r\n        return(\r\n            <div className='header'>\r\n                <HeaderLogo />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderContainer;\r\n","const options=['people', 'planets', 'species', 'vehicles', 'starships'];\r\n\r\nexport default options;","import {REQUEST_CONTENT_PENDING, REQUEST_CONTENT_SUCCESS, REQUEST_CONTENT_FAILED} from './constants';\r\n\r\nexport const requestContent=(dispatch, type)=>{\r\n    dispatch({type: REQUEST_CONTENT_PENDING});\r\n    fetch(`https://swapi.co/api/${type}/?format=json`)\r\n    .then(response=>response.json())\r\n    .then(content=>dispatch({type: REQUEST_CONTENT_SUCCESS, payload:{type: type, content: content}}))\r\n    .catch(err=>dispatch({type: REQUEST_CONTENT_FAILED, payload: err}));\r\n}","export const REQUEST_CONTENT_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_CONTENT_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_CONTENT_FAILED='REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport 'tachyons';\r\n\r\nimport {requestContent} from '../actions';\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        isPending: state.isPending,\r\n        type: state.type,\r\n        content: state.content,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        onContentChange: (event)=>requestContent(dispatch, event.target.id)\r\n    }\r\n}\r\nclass SideBarOption extends Component{\r\n    render(){\r\n        const {onContentChange, option}=this.props;\r\n        return(\r\n            <div className=''>\r\n                <p className=\"option\" id={option} onClick={onContentChange}>{option.toUpperCase()}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBarOption);","import React,{Component} from 'react';\r\nimport SideBarOption from '../../containers/sideBar/SideBarOption';\r\nimport 'tachyons';\r\n\r\nclass SideBar extends Component{\r\n    render(){\r\n        return(\r\n            <div className='w-25 pa3'>\r\n                 {\r\n                     this.props.options.map(option=>{\r\n                         return <SideBarOption key={option} option={option}/>\r\n                     })\r\n                 }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SWHero=({name, by})=>{\r\n    return(\r\n        <div className='tc dib h5 pa2 mr2 mb2 br4-l grow bg-black' style={{border: '2px solid #f1c40f'}}>\r\n            <img src={`https://robohash.org/${name}?size=150x150`} alt='avatar'></img>\r\n            <h4 style={{color: 'white'}}>{name}</h4>\r\n            <p style={{color: 'white'}}>{by}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SWHero;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SWPlanet=({name, terrain, gravity, climate, population })=>{\r\n    return(\r\n        <div className='tc dib h5 pa2 pt4 mr2 mb2 br4-l grow bg-navy' style={{border: '2px solid #f1c40f'}}>\r\n            {/* <img src={`https://robohash.org/${name}?size=150x150`} alt='avatar'></img> */}\r\n            <h4 className='yellow'>{name}</h4>\r\n            <p className='green'>terrain: {terrain}</p>\r\n            <p className='orange'>gravity: {gravity}</p>\r\n            <p className='pink'>climate: {climate}</p>\r\n            <p className='gold'>population: {population}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SWPlanet;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport SWHero from '../../components/mainContent/SWHero';\r\nimport SWPlanet from '../../components/mainContent/SWPlanet';\r\nimport 'tachyons';\r\n\r\nimport {requestContent} from '../actions';\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        isPending: state.isPending,\r\n        type: state.type,\r\n        content: state.content,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        onRender: ()=>requestContent(dispatch, 'people')\r\n    }\r\n}\r\n\r\nclass ResultsList extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.onRender();\r\n    }\r\n\r\n    render(){\r\n        const {isPending, content, type}=this.props;\r\n        if(isPending){\r\n            return(\r\n                <div className='tc w-75'>\r\n                    <h1 className='yellow'>Loading...</h1>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className='tc w-75'>\r\n                    <h1 className='yellow'>{type.toUpperCase()}</h1>\r\n                   {\r\n                    (type === 'people' || type === 'planets') ?\r\n                    content.map(el=>{\r\n                        switch(type){\r\n                            case 'people':\r\n                                return (\r\n                                    <SWHero key={el.name} name={el.name} by={el.birth_year}/>\r\n                                );\r\n                            case 'planets':\r\n                                return (\r\n                                    <SWPlanet key={el.name} name={el.name} terrain={el.terrain} gravity={el.gravity} \r\n                                    climate={el.climate} population={el.population}/>\r\n                                );\r\n                            default:\r\n                                return null;\r\n                        }\r\n                    })\r\n                    :\r\n                    <div>\r\n                        <img src={'https://robohash.org/oops?set=set2&size=300x300'} alt='Oops..'></img>\r\n                        <h2 className='white'>Oops... Something went wrong</h2>\r\n                    </div>  \r\n                   }\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultsList);\r\n","import React from 'react';\r\nimport options from './options';\r\nimport SideBar from '../sideBar/SideBar';\r\nimport 'tachyons';\r\nimport './general.css';\r\nimport ResultsList from '../../containers/resultList/ResultsList';\r\n\r\nconst GeneralContainer=()=>{\r\n    return(\r\n        <div className='flex flex-wrap'>\r\n            <SideBar options={options}/>\r\n            <ResultsList/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeneralContainer;\r\n","import React from 'react';\r\nimport HeaderContainer from '../header/HeaderContainer';\r\nimport GeneralContainer from '../mainContent/GeneralContainer';\r\n\r\nconst App =()=>{\r\n    return(\r\n        <div>\r\n            <HeaderContainer />\r\n            <GeneralContainer />    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport {requestContent} from './containers/reducers';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store=createStore(requestContent, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <App />\r\n                </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}