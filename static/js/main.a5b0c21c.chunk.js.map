{"version":3,"sources":["components/header/HeaderLogo.js","containers/headerContainer/HeaderContainer.js","containers/generalContainer/options.js","components/sideBar/SideBarOption.js","components/sideBar/SideBar.js","components/mainContent/SWHero.js","components/mainContent/ResultsList.js","containers/generalContainer/GeneralContainer.js","containers/App.js","serviceWorker.js","index.js","components/header/logo.png"],"names":["HeaderLogo","react_default","a","createElement","className","src","logo","alt","HeaderContainer","header_HeaderLogo","Component","options","SideBarOption","this","props","option","toUpperCase","SideBar","map","sideBar_SideBarOption","SWHero","style","backgroundColor","border","color","ResultsList","mainContent_SWHero","GeneralContainer","sideBar_SideBar","mainContent_ResultsList","App","headerContainer_HeaderContainer","generalContainer_GeneralContainer","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kSAWeA,EARE,WACb,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMC,IAAI,qBCQhBC,0LARP,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACM,EAAD,cAJcC,cCFfC,EAFD,CAAC,SAAU,UAAW,QAAS,UAAW,WAAY,aCYrDC,mLARP,OACGX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUS,KAAKC,MAAMC,OAAOC,uBAJ5BN,aCgBbO,yLAZP,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAENS,KAAKC,MAAMH,QAAQO,IAAI,SAAAH,GACnB,OAAOd,EAAAC,EAAAC,cAACgB,EAAD,CAAeJ,OAAQA,cANjCL,cCSPU,SAVF,WACT,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCiB,MAAO,CAACC,gBAAiB,OAAQC,OAAQ,sBACzFtB,EAAAC,EAAAC,cAAA,OAAKE,IAAI,kDAAkDE,IAAI,WAC/DN,EAAAC,EAAAC,cAAA,MAAIkB,MAAO,CAACG,MAAO,UAAnB,QACAvB,EAAAC,EAAAC,cAAA,KAAGkB,MAAO,CAACG,MAAO,UAAlB,iBCWGC,EAfG,WAEd,OACIxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACZH,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAD,QCIIC,mLATP,OACI1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACyB,EAAD,CAASjB,QAASA,IAClBV,EAAAC,EAAAC,cAAC0B,EAAD,cALenB,aCQhBoB,mLATP,OACI7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,cALEtB,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a5b0c21c.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from './logo.png';\r\n\r\nconst HeaderLogo=()=>{\r\n    return(\r\n       <div className='header-logo'>\r\n           <img src={logo} alt='Star Wars logo'></img>\r\n       </div> \r\n    )\r\n}\r\n\r\nexport default HeaderLogo;","import React, {Component} from 'react';\r\nimport HeaderLogo from '../../components/header/HeaderLogo';\r\nimport './header.css';\r\n\r\nclass HeaderContainer extends Component{\r\n    render(){\r\n        return(\r\n            <div className='header'>\r\n                <HeaderLogo />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderContainer;\r\n","const options=['people', 'planets', 'films', 'species', 'vehicles', 'starships'];\r\n\r\nexport default options;","import React,{Component} from 'react';\r\n\r\nclass SideBarOption extends Component{\r\n    render(){\r\n        return(\r\n           <div>\r\n               <p className=\"option\">{this.props.option.toUpperCase()}</p>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideBarOption;","import React,{Component} from 'react';\r\nimport SideBarOption from './SideBarOption';\r\nimport 'tachyons';\r\n\r\nclass SideBar extends Component{\r\n    render(){\r\n        return(\r\n            <div className='side-bar fl w-20 pa3'>\r\n                 {\r\n                     this.props.options.map(option=>{\r\n                         return <SideBarOption option={option}/>\r\n                     })\r\n                 }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SWHero=()=>{\r\n    return(\r\n        <div className='tc outline w-25 pa3 mr2 mb2 br3-ns' style={{backgroundColor: '#111', border: '2px solid #f1c40f'}}>\r\n            <img src='https://robohash.org/102.158.18.19?size=100x100' alt='avatar'></img>\r\n            <h4 style={{color: 'white'}}>Name</h4>\r\n            <p style={{color: 'white'}}>birth date</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SWHero;","import React from 'react';\r\nimport SWHero from './SWHero';\r\nimport 'tachyons';\r\n\r\nconst ResultsList=()=>{\r\n\r\n    return(\r\n        <div className='flex flex-wrap justify-center'>\r\n           <SWHero />\r\n           <SWHero />\r\n           <SWHero />\r\n           <SWHero />\r\n           <SWHero />\r\n           <SWHero />\r\n           <SWHero />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultsList;\r\n","import React,{Component} from 'react';\r\nimport options from './options';\r\nimport SideBar from '../../components/sideBar/SideBar';\r\nimport 'tachyons';\r\nimport './general.css';\r\nimport ResultsList from '../../components/mainContent/ResultsList';\r\n\r\nclass GeneralContainer extends Component{\r\n    render(){\r\n        return(\r\n            <div className='flex flex-wrap'>\r\n                <SideBar options={options}/>\r\n                <ResultsList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GeneralContainer;\r\n","import React,{Component} from 'react';\r\nimport HeaderContainer from './headerContainer/HeaderContainer';\r\nimport GeneralContainer from './generalContainer/GeneralContainer';\r\n\r\nclass App extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <HeaderContainer />\r\n                <GeneralContainer />    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.93895aa2.png\";"],"sourceRoot":""}