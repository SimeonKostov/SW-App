{"version":3,"sources":["components/header/logo.png","components/header/HeaderLogo.js","containers/headerContainer/HeaderContainer.js","containers/generalContainer/options.js","components/sideBar/SideBarOption.js","components/sideBar/SideBar.js","components/mainContent/SWHero.js","components/mainContent/SWPlanet.js","components/mainContent/ResultsList.js","containers/generalContainer/GeneralContainer.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HeaderLogo","react_default","a","createElement","className","src","logo","alt","HeaderContainer","header_HeaderLogo","Component","options","SideBarOption","_ref","option","onContentChange","onClick","id","toUpperCase","SideBar","_this","this","props","map","sideBar_SideBarOption","key","SWHero","name","by","style","border","concat","color","SWPlanet","terrain","gravity","climate","population","ResultsList","cont","contType","length","el","mainContent_SWHero","birth_year","mainContent_SWPlanet","GeneralContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","target","fetch","then","resp","json","setState","content","results","type","state","bind","assertThisInitialized","_this2","_this$state","console","log","sideBar_SideBar","mainContent_ResultsList","App","headerContainer_HeaderContainer","generalContainer_GeneralContainer","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a24942c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.93895aa2.png\";","import React from 'react';\r\nimport logo from './logo.png';\r\n\r\nconst HeaderLogo=()=>{\r\n    return(\r\n       <div className='header-logo'>\r\n           <img src={logo} alt='Star Wars logo'></img>\r\n       </div> \r\n    )\r\n}\r\n\r\nexport default HeaderLogo;","import React, {Component} from 'react';\r\nimport HeaderLogo from '../../components/header/HeaderLogo';\r\nimport './header.css';\r\n\r\nclass HeaderContainer extends Component{\r\n    render(){\r\n        return(\r\n            <div className='header'>\r\n                <HeaderLogo />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderContainer;\r\n","const options=['people', 'planets', 'species', 'vehicles', 'starships'];\r\n\r\nexport default options;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SideBarOption=({option, onContentChange})=>{\r\n    return(\r\n        <div className='' onClick={onContentChange}>\r\n            <p className=\"option\" id={option}>{option.toUpperCase()}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBarOption;","import React,{Component} from 'react';\r\nimport SideBarOption from './SideBarOption';\r\nimport 'tachyons';\r\n\r\nclass SideBar extends Component{\r\n    render(){\r\n        return(\r\n            <div className='w-25 pa3'>\r\n                 {\r\n                     this.props.options.map(option=>{\r\n                         return <SideBarOption key={option} option={option} onContentChange={this.props.onContentChange}/>\r\n                     })\r\n                 }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SWHero=({name, by})=>{\r\n    return(\r\n        <div className='tc dib h5 pa2 mr2 mb2 br4-l grow bg-black' style={{border: '2px solid #f1c40f'}}>\r\n            <img src={`https://robohash.org/${name}?size=150x150`} alt='avatar'></img>\r\n            <h4 style={{color: 'white'}}>{name}</h4>\r\n            <p style={{color: 'white'}}>{by}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SWHero;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SWPlanet=({name, terrain, gravity, climate, population })=>{\r\n    return(\r\n        <div className='tc dib h5 pa2 pt4 mr2 mb2 br4-l grow bg-navy' style={{border: '2px solid #f1c40f'}}>\r\n            {/* <img src={`https://robohash.org/${name}?size=150x150`} alt='avatar'></img> */}\r\n            <h4 className='yellow'>{name}</h4>\r\n            <p className='green'>terrain: {terrain}</p>\r\n            <p className='orange'>gravity: {gravity}</p>\r\n            <p className='pink'>climate: {climate}</p>\r\n            <p className='gold'>population: {population}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SWPlanet;","import React from 'react';\r\nimport SWHero from './SWHero';\r\nimport SWPlanet from './SWPlanet';\r\nimport 'tachyons';\r\n\r\nconst ResultsList=({cont, contType})=>{\r\n    if(!cont.length){\r\n        return(\r\n            <div className='tc w-75'>\r\n                <h1 className='yellow'>Loading...</h1>\r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div className='tc w-75'>\r\n                <h1 className='yellow'>{contType.toUpperCase()}</h1>\r\n               {\r\n                (contType === 'people' || contType === 'planets') ?\r\n                cont.map(el=>{\r\n                    switch(contType){\r\n                        case 'people':\r\n                            return (\r\n                                <SWHero key={el.name} name={el.name} by={el.birth_year}/>\r\n                            );\r\n                        case 'planets':\r\n                            return (\r\n                                <SWPlanet key={el.name} name={el.name} terrain={el.terrain} gravity={el.gravity} \r\n                                climate={el.climate} population={el.population}/>\r\n                            );\r\n                        default:\r\n                            return null;\r\n                    }\r\n                })\r\n                :\r\n                <div>\r\n                    <img src={'https://robohash.org/oops?set=set2&size=300x300'} alt='Oops..'></img>\r\n                    <h2 className='white'>Oops... Something went wrong</h2>\r\n                </div>  \r\n               }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultsList;\r\n","import React,{Component} from 'react';\r\nimport options from './options';\r\nimport SideBar from '../../components/sideBar/SideBar';\r\nimport 'tachyons';\r\nimport './general.css';\r\nimport ResultsList from '../../components/mainContent/ResultsList';\r\n\r\nclass GeneralContainer extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            type: '',\r\n            content: []\r\n        }\r\n        this.onContentChange=this.onContentChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://swapi.co/api/people/?format=json')\r\n        .then(resp=>resp.json())\r\n        .then(json=>this.setState({content: json.results, type: 'people'}));\r\n    }\r\n\r\n    onContentChange=(event)=>{\r\n        let id=event.target.id;\r\n        fetch(`https://swapi.co/api/${event.target.id}/?format=json`)\r\n        .then(resp=>resp.json())\r\n        .then(json=>this.setState({content: json.results, type: id}));\r\n    }\r\n\r\n    render(){\r\n        let {type, content}=this.state;\r\n        console.log(content);\r\n        return(\r\n            <div className='flex flex-wrap'>\r\n                <SideBar options={options} onContentChange={this.onContentChange}/>\r\n                <ResultsList cont={content} contType={type}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GeneralContainer;\r\n","import React,{Component} from 'react';\r\nimport HeaderContainer from './headerContainer/HeaderContainer';\r\nimport GeneralContainer from './generalContainer/GeneralContainer';\r\n\r\nclass App extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <HeaderContainer />\r\n                <GeneralContainer />    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}